Create a 3D Physics Puzzle Game - Technical Implementation Specification

Required Features:

Core Technology Stack:
Three.js for 3D rendering
Cannon.js for physics engine
Nipple.js for mobile controls
Firebase for leaderboard/storage
Web Audio API for sound management

Game Mechanics:
Create a Player class handling:
Physics-based movement
Collision detection
Item collection
Portal interactions (refer - @https://docs.google.com/forms/d/e/1FAIpQLSdB8LEZIoYuh4_tO89s2DbMT7nqyDvJGrgrrUoBquLA4XCBRA/viewform ) 

State management
Level Structure:
Implement LevelManager class with:
Modular level loading system
JSON-based level definitions
Dynamic obstacle placement
Portal system integration
Time management (45-120s per level)

Technical Requirements:
Asset preloading system:
Texture compression (WebP format)
Low-poly models (max 2000 polygons per object)
Audio sprite implementation
Asynchronous loading with progress tracking

Controls Implementation: Desktop:
WASD/Arrow keys for movement
Mouse for camera control
Spacebar for actions Mobile:
Nipple.js virtual joystick
Swipe gestures for camera
Tap for actions
Performance Optimization:
Target specifications:
Initial load < 2s
60 FPS on mid-range devices
Max asset size: 5MB total
Implement object pooling
Use WebGL instancing for repeated elements
UI/UX Requirements:
Implement minimal interface:
Timer display
Score counter
Level progress
Username entry
Subtle advertising zones
Responsive layout system
Audio System:
Create AudioManager class:
Background music loop (ambient)
Sound effects pool
Volume control
Mobile audio optimization
Development Phases: Phase 1:
Core gameplay mechanics
2 sample levels
Basic UI
Local scoring Phase 2:
Global leaderboard
Additional levels
Portal system
Enhanced graphics
Code Structure:
Implement using:
ES6 modules
Design patterns (Observer, Factory, Singleton)
Clear documentation
Consistent naming conventions
Performance monitoring hooks
Deliverable: A production-ready repository with complete implementation documentation and deployment instructions for hosting.